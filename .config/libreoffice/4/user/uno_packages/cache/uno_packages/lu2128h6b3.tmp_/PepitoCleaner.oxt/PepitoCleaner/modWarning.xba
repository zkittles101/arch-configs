<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="modWarning" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit
&apos;Type
Type RegEx
	Key as String
	Visible as Boolean
	Find as String
	TextString as String
	isRegEx as Boolean
	CaseSensitive as Boolean
	Dual as Boolean
	Tipologia as Integer
	
	Mode_1 as Integer
	Label_1 as string
	Replace_1 as string
	Direction_1 as String &apos;L Left R Right
	Sel_1 as Integer
	
	Mode_2 as Integer
	Label_2 as string
	Replace_2 as string
	Direction_2 as String &apos;L Left R Right
	Sel_2 as Integer	
End Type

&apos;type
Type WordElement
	Key as String
    Count as integer
    Txt as string
    RE_Key as string
End Type
type tUndo
	IDMenu
	IDObject
end type
&apos;*********************************************************************************************
&apos;*********************************************************************************************
&apos;                                   VARIOUS
&apos;*********************************************************************************************
&apos;*********************************************************************************************
function Make_Warning(we, warReplace as string) as Boolean
   	Dim oBar as object
   	Dim n_wait as integer
   	Dim pNewWord as string
   	Dim pCursor
   	Dim pReplace
   	Dim act
   	
   	on error goto Make_warningKO  
    hideAll
	showWait
    obar=gDlgMain.getControl(&quot;wai_prgBar&quot;)
	obar.setRange(0,1)
	gDlgMain.getControl(&quot;wai_lblTitle&quot;).text = gLang(&quot;default_wait_00006&quot;).txt
	n_wait=0

    oBar.SetValue(n_wait) : n_wait=n_wait+1
   	gDlgMain.getControl(&quot;wai_lblSubject&quot;).text=we.Txt
   	pCursor = thisComponent.getText.createTextCursor()
   	&apos;pCursor = thisComponent.getCurrentController.getViewCursor()
	pReplace = thisComponent.createReplaceDescriptor
    pReplace.SearchRegularExpression = False
    pReplace.SearchCaseSensitive=True
    pReplace.SearchString = we.Txt
    pReplace.ReplaceString = warReplace
    thisComponent.replaceAll(pReplace)
    set act = new tUndo
    act.IDMenu=gTabMenu(gPreference.MenuSelected).TagId
    act.IDObject=we.Key
    add_undo(act)
	
	Make_Warning=true
	on error goto 0
    exit function
	
	Make_WarningKO:
    ErrorLog (&quot;┌ ▲ Error &quot; &amp; Err &amp; &quot;: &quot; &amp; Error$ &amp; chr(13) &amp; &quot;└ ▲ in Make_Warning !&quot;)
    Make_Warning = False
    On Error Goto 0
End function
function Find_Warning_Word(strWord as string, RE_Key as string)

	Dim refind as boolean
	Dim pCursor as Object
	Dim oText
    Dim pFound as object
    Dim pSearch as object
    Dim oRet
    Dim i
    dim oFirst
    Dim re as RegEx
    dim strFinded as string

    on error goto Find_Warning_WordKO
    refind=True
   	pCursor = thisComponent.getCurrentController.getViewCursor()
   	&apos;pCursor = thisComponent.getText.createTextCursorbyRange(oCursor.getend)
   
    re=LookupCollection(gRegEx_Warning, RE_Key)
    
    
    
    oText=ThisComponent.Text 
    pSearch = thisComponent.createSearchDescriptor
    pSearch.SearchRegularExpression = re.isRegEx
    pSearch.SearchCaseSensitive=re.CaseSensitive
    pSearch.SearchString=re.Find
    pFound = thisComponent.findAll(pSearch)
	oret=-1
	oFirst=-1
    for i=0 to pFound.getCount - 1
    	strFinded = pFound.getByIndex(i).String
    	if strFinded=strWord then
    		If oText.compareRegionStarts(pFound.getByIndex(i).start,pCursor.start) = -1 then
	    		oret=i
	    		exit for
	    	else
	    		if oFirst=-1 then oFirst=i
	    		oret=-2
	    	end if
    	end if
    next
    if oret=-2 then
    	if gPreference.QuestionEndPage then
   			refind = QuestionEndPage
   		end if
   		if refind then
   			oRet=oFirst 
   		end if
    end if
    if oret&gt;-1 then
    	pCursor.gotoRange(pFound.getByIndex(oRet),false)
    	Find_Warning_Word=true
    else
    	Find_Warning_Word=false
    end if

    on error goto 0
    exit function
	
	Find_Warning_WordKO:
    ErrorLog (&quot;┌ ▲ Error &quot; &amp; Err &amp; &quot;: &quot; &amp; Error$ &amp; chr(13) &amp; &quot;└ ▲ in Find_Warning_Word !&quot;)
    Find_Warning_Word = False
    On Error Goto 0
End Function
&apos;*********************************************************************************************
&apos;*********************************************************************************************
&apos;                                   DISPLAY
&apos;*********************************************************************************************
&apos;*********************************************************************************************
function popolateSelected_war as boolean
	    
    on error goto popolateSelected_warKO
    
    popolate_war_cmbList
    popolate_war_lstList
     
    popolateSelected_war=true
    on error goto 0
    exit function
   
	popolateSelected_warKO:
    ErrorLog (&quot;┌ ▲ Error &quot; &amp; Err &amp; &quot;: &quot; &amp; Error$ &amp; chr(13) &amp; &quot;└ ▲ in popolateSelected_war !&quot;)
	popolateSelected_war=False
    On Error Goto 0
end function
sub popolate_war_cmbList
	dim re as RegEx
	dim oCmb
	dim i as integer
	
	oCmb=gDlgMain.getControl(&quot;war_cmbList&quot;)
	i=oCmb.getSelectedItemPos
	oCmb.removeitems(0, oCmb.ItemCount)
	oCmb.addItem (gLang(&quot;default_war_00001&quot;).txt,  oCmb.ItemCount)
	for each re in gRegEx_warning
		if re.visible then oCmb.addItem (re.TextString,  oCmb.ItemCount)	
	next
	if i&lt;&gt;-1 and i&lt;oCmb.ItemCount then
		gBlockEvent=True
		oCmb.selectItemPos(i, True) 
		gBlockEvent=false
	end if
	if oCmb.getSelectedItem=&quot;&quot; then
		gBlockEvent=True
		oCmb.selectItemPos(1, True) 
		gBlockEvent=false
	end if
end sub
function popolate_war_lstList as boolean
	Dim oDicLists
    Dim oDic 
    Dim oIgnore 
    Dim oList
    Dim oBar
    Dim re as RegEx
    Dim pCursor
    Dim n_wait as integer
    Dim pText as string
    Dim oWord
    Dim collWord
    Dim we as WordElement
    Dim pFound
    dim nRegEx as integer
    Dim pKey as string
    dim pSearch
    dim matchCount
    dim i
    dim oCmb
    dim s as string
      
    on error goto popolate_war_lstListKO
    set gActView=new collection
    set collWord=new collection
    &apos;initialize wait
    obar=gDlgMain.getControl(&quot;wai_prgBar&quot;)
	obar.setRange(0,0)
	gDlgMain.getControl(&quot;wai_lblTitle&quot;).text = gLang(&quot;default_wait_00006&quot;).txt
	gDlgMain.getControl(&quot;wai_lblSubject&quot;).text=&quot;&quot;
	n_wait=0
    &apos;get dictionary
    oDicLists = createUnoService (&quot;com.sun.star.linguistic2.DictionaryList&quot;) 
	oDic = oDicLists.getDictionaryByName(&quot;standard.dic&quot;) 
	if isnull(oDic) then 
		gExistStandardDic=False
	else
		gExistStandardDic=True
	end if
	oIgnore = oDicLists.getDictionaryByName(&quot;IgnoreAllList&quot;) 
	&apos;get listbox
	oList=gdlgMain.getControl(&quot;war_lstList&quot;)
    oList.removeitems(0, oList.ItemCount)
    &apos;get war_cmbList
    oCmb=gDlgMain.getControl(&quot;war_cmbList&quot;)
    if oCmb.getSelectedItemPos=0 then
    	s=&quot;&quot;
    else
    	s=oCmb.getSelectedItem
    end if
    
    pCursor = thisComponent.getText.createTextCursor()
    pSearch = thisComponent.createSearchDescriptor
    pSearch.SearchRegularExpression = True
    obar.setRange(0,gRegEx_Warning.Count)
    nRegEx=0
    for each re in gRegEx_Warning
    	oBar.SetValue(n_wait) : n_wait=n_wait+1
    	nRegEx=nRegEx+1
        if re.Visible and (s=&quot;&quot; or s=re.TextString) then
        	if re.key=&quot;RE_DEFAULT_W_0003&quot; then
        		nRegEx=nRegEx
        	end if
    		pSearch.SearchCaseSensitive=re.CaseSensitive
    		pSearch.SearchString=re.Find
    		pFound = thisComponent.findAll(pSearch)
    		matchCount = pFound.getCount()
    		gDlgMain.getControl(&quot;wai_lblSubject&quot;).text=matchCount &amp; &quot; - &quot; &amp; re.TextString
       		if matchCount &gt;= 1 Then
          		For i = 0 To pFound.getCount - 1
             		pText = pFound.getByIndex(i).String
      				oWord=Null
      				&apos;check dictionary
      				&apos;if gExistStandardDic then oWord = oDic.getEntry(pText)
      				&apos;if isNull(oWord) then oWord = oIgnore.getEntry(pText)
       				&apos;if isNull(oWord) then &apos;word not find in dictionary
       					pKey=pText &amp; &quot;_&quot; &amp; nRegEx
       					pKey=AdjustKeyCase(pKey)
       					we=LookupCollection(collWord, pKey)
       					if isNull(we) then
       						set we = new WordElement
       						we.Count=1
       						we.Txt=ptext
       						we.RE_Key=re.key
       						we.Key=pKey
       						collWord.add we, pKey
       					else
       						we.Count=we.Count+1
       					end if
        			&apos;end if
          		Next
       		end if
    	end if
    next
    
    for each we in collWord
    	pText=&quot;&quot;
    	if len(str(we.Count))&lt;5 then pText = string(5-len(str(we.Count)),&quot; &quot;)
		pText = pText &amp; we.Count &amp; &quot; &quot; &amp; we.Txt
		oList.addItem (pText, oList.ItemCount)
		gActView.add we, we.Key
    next
    
    popolate_war_lstList=true
    on error goto 0
    exit function
   
	popolate_war_lstListKO:
    ErrorLog (&quot;┌ ▲ Error &quot; &amp; Err &amp; &quot;: &quot; &amp; Error$ &amp; chr(13) &amp; &quot;└ ▲ in popolate_war_lstList !&quot;)
	popolate_war_lstList=False
    On Error Goto 0
end function
&apos;*********************************************************************************************
&apos;*********************************************************************************************
&apos;                                   EVENTS
&apos;*********************************************************************************************
&apos;*********************************************************************************************
Sub virtual_AddDictionary_Warning_Click(strDictionary as string)
   Dim pSel
   Dim n as integer
   Dim strWord as string
   Dim pTrovato as boolean
   Dim oDicList
   Dim oDic
   Dim oWord
   
   on error goto virtual_AddDictionary_Warning_ClickKO 
   oDicList = createUnoService (&quot;com.sun.star.linguistic2.DictionaryList&quot;) 
   oDic = oDicList.getDictionaryByName(strDictionary) 
   
   pSel = gDlgMain.getControl(&quot;war_lstList&quot;).getSelectedItemsPos()
   for n=0 to ubound(pSel)
      strWord = gActView(psel(n)+1).Txt
      oWord = oDic.getEntry(strWord)
      if isNull(oWord) then oDic.add(strWord, FALSE, &quot;&quot;)
   next
   on error goto 0
   exit Sub
   
   virtual_AddDictionary_Warning_ClickKO:
   ErrorLog (&quot;┌ ▲ Error &quot; &amp; Err &amp; &quot;: &quot; &amp; Error$ &amp; chr(13) &amp; &quot;└ ▲ in virtual_AddDictionary_Warning_Click !&quot;)
   On Error Goto 0
End sub
sub virtual_Make_Warning_Click(strNew as string)
	dim n as integer
	Dim we as WordElement
	Dim sel
	Dim collWe
	dim nColl
	dim strSel as string
	dim pText
	dim oList
	dim newSel as integer

	
	on error goto virtual_Make_Warning_ClickKO 
	oList=gdlgMain.getControl(&quot;war_lstList&quot;)
	n=oList.getSelectedItemPos()
	if n&lt;&gt;-1 then
	   newSel=n
	   we=gActView(n+1)
       if Make_Warning(we, strNew) then
       	  set collWE = new collection
       	  for n=0 to oList.getItemCount-1
       	  	  if n&lt;&gt;newsel then
	   	  	  	  we = gActView(n+1)
	   	  	  	  collWe.add we, we.Key
	   	  	  end if
       	  next n
       	  set gActView = CollWE
    	  oList.removeitems(0, oList.ItemCount)
       	  for each we in gActView
    		pText=&quot;&quot;
    		if len(str(we.Count))&lt;5 then pText = string(5-len(str(we.Count)),&quot; &quot;)
			pText = pText &amp; we.Count &amp; &quot; &quot; &amp; we.Txt
			oList.addItem (pText, oList.ItemCount)
    	  next
    	  if oList.ItemCount&gt;=1 then
    	  	if newSel&gt;=oList.ItemCount then newSel=oList.ItemCount-1
    	  	oList.selectItemPos(newSel, True)
    	  end if
       	  hideAll
       	  showSelected
       	  showButtonSubMenu(flagButtonSubMenu)
       else
       	  showDialog
       end if
    end if
    on error goto 0
    exit Sub
   
    virtual_Make_Warning_ClickKO:
    ErrorLog (&quot;┌ ▲ Error &quot; &amp; Err &amp; &quot;: &quot; &amp; Error$ &amp; chr(13) &amp; &quot;└ ▲ in virtual_Make_Warning_Click !&quot;)
    On Error Goto 0
end sub
sub virtual_Find_Warning_Click
	dim n as integer
	dim we as WordElement
	dim oList
	if gBlockEvent then exit sub
	oList=gdlgMain.getControl(&quot;war_lstList&quot;)
	n=oList.getSelectedItemPos()
	if n&lt;&gt;-1 then
       we=gActView(n+1)
       if we.txt&lt;&gt;&quot;&quot; then
          if not Find_Warning_Word(we.Txt, we.RE_Key) then
       	  	 showDialog	 
       	     exit sub
       	  else
       	  	 gdlgMain.getControl(&quot;sm_war_text&quot;).Text=we.txt
       	  end if
       end if
    end if
end sub
</script:module>