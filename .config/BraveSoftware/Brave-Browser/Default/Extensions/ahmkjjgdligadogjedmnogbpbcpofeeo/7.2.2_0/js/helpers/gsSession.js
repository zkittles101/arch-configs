var gsSession=function(){"use strict";let s,e,t,n,i,o,a,r,g=!0,l=null,c=!1,d=!1;async function u(e){const t=chrome.runtime.getManifest().version,n=e.version;let i;gsUtils.log("gsSession","A new version is available: "+t+" -> "+n);const o=await h();o&&(i=await gsIndexedDb.createOrUpdateSessionRestorePoint(o,t));const a=await gsUtils.getSuspendedTabCount();!i||a>0?await gsChrome.tabsCreate(s):chrome.runtime.reload()}function f(){return t||(t=Date.now()+"",gsUtils.log("gsSession","sessionId: ",t)),t}async function h(){const s=await gsChrome.windowsGetAll();if(!s.some((s=>s.tabs&&s.tabs.length)))return gsUtils.warning("gsSession","Failed to build current session. Could not find any tabs."),null;return{sessionId:f(),windows:s,date:(new Date).toISOString()}}async function w(){const s=await h();s&&await gsIndexedDb.updateSession(s)}async function S(s){gsUtils.log("gsSession","Checking for crash recovery: "+(new Date).toISOString());const e=s.filter((s=>!gsUtils.isSpecialTab(s)&&gsUtils.isSuspendedTab(s))),t=s.filter((s=>-1===s.url.indexOf(chrome.runtime.id)));if(e.length>0)return gsUtils.log("gsSession",'Aborting tab recovery. Browser has open suspended tabs. Assuming user has "On start-up -> Continue where you left off" set or is restarting with suspended pinned tabs.'),!1;const n=await gsIndexedDb.fetchLastSession();if(!n)return gsUtils.log("gsSession","Aborting tab recovery. Could not find last session."),!1;gsUtils.log("gsSession","lastSession: ",n);const i=n.windows.reduce(((s,e)=>s.concat(e.tabs)),[]),o=i.filter((s=>gsUtils.isSuspendedTab(s))),a=i.filter((s=>-1===s.url.indexOf(chrome.runtime.id)));if(0===o.length)return gsUtils.log("gsSession","Aborting tab recovery. Last session contained no suspended tabs."),!1;const r=t.reduce(((s,e)=>{return 0===(t=e).url.indexOf("chrome://newtab")&&0===t.index||!i.some((s=>s.id===t.id&&s.url===t.url))?s:s+1;var t}),0),g=Math.max(a.length,t.length);return gsUtils.log("gsSession",r+" / "+g+" tabs have the same id between the last session and the current session."),!(0===r||g-r>1)||(gsUtils.log("gsSession","Aborting tab recovery. Tab IDs do not match."),!1)}async function m(){const s=await gsIndexedDb.fetchLastSession();if(!s)return;const e=Date.now();gsUtils.log("gsSession","\n\n------------------------------------------------\nRecovery mode started.\n------------------------------------------------\n\n"),gsUtils.log("gsSession","lastSession: ",s),gsUtils.removeInternalUrlsFromSession(s);const t=await gsChrome.windowsGetAll(),n=function(s,e){const t={};if(s.slice().forEach((function(n){const i=e.find((function(s){return s.id===n.id}));i&&(t[n.id]=i,s=s.filter((function(s){return s.id!==n.id})),e=e.filter((function(s){return s.id!==i.id})))})),0===s.length||0===e.length)return t;let n=function(s,e){const t={};s.forEach((function(s){t[s.id]=[],s.tabs.forEach((function(e){gsUtils.isNormalTab(e)&&t[s.id].push(e.url)}))}));const n={};e.forEach((function(s){n[s.id]=[],s.tabs.forEach((function(e){gsUtils.isNormalTab(e)&&n[s.id].push(e.url)}))}));const i=[];return s.forEach((function(s){e.forEach((function(e){const o=t[s.id],a=n[e.id].filter((function(s){return o.includes(s)})).length;i.push({tabMatchCount:a,sessionWindow:s,currentWindow:e})}))})),i}(s,e);for(;s.length>0&&e.length>0;){const i=Math.max(...n.map((function(s){return s.tabMatchCount}))),o=n.find((function(s){return s.tabMatchCount===i}));t[o.sessionWindow.id]=o.currentWindow;const a=s.length;if(s=s.filter((function(s){return s.id!==o.sessionWindow.id})),e=e.filter((function(s){return s.id!==o.currentWindow.id})),gsUtils.log("gsUtils","Matched with tab count of "+i+": ",o.sessionWindow,o.currentWindow),n=n.filter((function(s){return s.sessionWindow!==o.sessionWindow&s.currentWindow!==o.currentWindow})),s.length>=a)break}return t}(s.windows,t),o=await gsChrome.windowsGetLastFocused(),a=o?o.id:null;for(let e of s.windows){const s=n[e.id];await U(e,s,0)}a&&await gsChrome.windowsUpdate(a,{focused:!0}),i=parseInt((Date.now()-e)/1e3),gsUtils.log("gsSession","\n\n------------------------------------------------\nRecovery mode finished. Time taken: "+i+" sec\n------------------------------------------------\n\n"),gsUtils.log("gsSession","updating current session"),w()}async function U(s,e,t){if(0===s.tabs.length&&gsUtils.log("gsUtils","SessionWindow contains no tabs to restore"),e){gsUtils.log("gsUtils","Matched sessionWindow with existingWindow: ",s,e);const n=[],i=[],o=[];for(const s of e.tabs)n.push(s.id),i.push(s.url);for(const[a,r]of s.tabs.entries())gsUtils.isSpecialTab(r)||i.includes(r.url)||n.includes(r.id)||o.push(new Promise((async s=>{await gsUtils.setTimeout(20*a),b(r,e.id,r.index,t),s()})));return void await Promise.all(o)}gsUtils.log("gsUtils","Could not find match for sessionWindow: ",s);const n=chrome.extension.getURL("html/restoring-window.html"),i=await gsUtils.createWindowAndWaitForFinishLoading({url:n,focused:!1},500),o=i.tabs[0];await gsChrome.tabsUpdate(o.id,{pinned:!0});const a=[];for(const[e,n]of s.tabs.entries())a.push(new Promise((async s=>{await gsUtils.setTimeout(e*(1e3/12)),b(n,i.id,e+1,t),s()})));await Promise.all(a),o&&await gsChrome.tabsRemove(o.id)}async function b(s,e,t,n){let i=s.url;1===n&&gsUtils.isNormalTab(s)?i=gsUtils.generateSuspendedUrl(s.url,s.title):2===n&&gsUtils.isSuspendedTab(s)&&(i=gsUtils.getOriginalUrl(s.url));const o=await gsChrome.tabsCreate({windowId:e,url:i,index:t,pinned:s.pinned,active:!1});for(const s of tgs.getInternalViewsByViewName("recovery"))s.exports.removeTabFromList(o)}return{initAsPromised:async function(){s=chrome.extension.getURL("html/update.html"),e=chrome.extension.getURL("html/updated.html"),await new Promise((s=>{chrome.extension.isAllowedFileSchemeAccess((e=>{d=e,s()}))})),await Promise.all([gsUtils.removeTabsByUrlAsPromised(s),gsUtils.removeTabsByUrlAsPromised(e)]),chrome.runtime.onUpdateAvailable.addListener((s=>{u(s)})),gsUtils.log("gsSession","init successful")},runStartupChecks:async function(){g=!0;const t=await gsChrome.tabsQuery();gsUtils.log("gsSession","preRecovery open tabs:",t);const i=chrome.runtime.getManifest().version;gsUtils.log("gsSession","curVersion:",i),a=gsStorage.fetchLastVersion(),gsUtils.log("gsSession","startupLastVersion:",a),chrome.extension.inIncognitoContext?o="Incognito":a===i?(gsUtils.log("gsSession","HANDLING NORMAL STARTUP"),o="Restart",await async function(s,e){if(await S(s)){const s=gsStorage.fetchLastExtensionRecoveryTimestamp(),e=s&&Date.now()-s<3e5;if(gsStorage.setLastExtensionRecoveryTimestamp(Date.now()),e){const s=chrome.extension.getURL("html/recovery.html");await gsChrome.tabsCreate(s),await gsUtils.setTimeout(2e3)}else await m()}else await gsIndexedDb.trimDbItems()}(t)):a&&"0.0.0"!==a?(gsUtils.log("gsSession","HANDLING UPDATE"),o="Update",await async function(t,n,i){gsStorage.setLastVersion(n);const o=i.split("."),a=n.split(".");o.length>=2&&a.length>=2&&(l=parseInt(a[0])>parseInt(o[0])?"major":parseInt(a[1])>parseInt(o[1])?"minor":"patch");if(!await gsIndexedDb.fetchSessionRestorePoint(i)){const s=await gsIndexedDb.fetchLastSession();s?await gsIndexedDb.createOrUpdateSessionRestorePoint(s,i):gsUtils.error("gsSession","No session restore point found, and no lastSession exists!")}await gsUtils.removeTabsByUrlAsPromised(s),await gsUtils.removeTabsByUrlAsPromised(e),await gsIndexedDb.performMigration(i),gsStorage.setNoticeVersion("0");if(await S(t)){await gsUtils.createTabAndWaitForFinishLoading(e,1e4),await m(),c=!0;const s=tgs.getInternalViewsByViewName("updated");if(s.length>0)for(const e of s)e.exports.toggleUpdated();else await gsUtils.removeTabsByUrlAsPromised(e),await gsChrome.tabsCreate({url:e})}else c=!0,await gsChrome.tabsCreate({url:e})}(t,i,a)):(gsUtils.log("gsSession","HANDLING NEW INSTALL"),o="Install",await async function(s){if(gsStorage.setLastVersion(s),!r||0===Object.keys(r).length){const s=chrome.extension.getURL("html/options.html?firstTime");await gsChrome.tabsCreate(s)}}(i)),await async function(){const s=Date.now();gsUtils.log("gsSession","\n\n------------------------------------------------\nChecking tabs for responsiveness..\n------------------------------------------------\n\n");const e=await gsChrome.tabsQuery();gsUtils.log("gsSession","postRecoverySessionTabs:",e);const t=await gsTabCheckManager.performInitialisationTabChecks(e),i=t.length,o=t.filter((s=>s===gsUtils.STATUS_SUSPENDED||s===gsUtils.STATUS_DISCARDED)).length;n=parseInt((Date.now()-s)/1e3),gsUtils.log("gsSession",`\n\n------------------------------------------------\nChecking tabs finished. Time taken: ${n} sec\n${o} / ${i} initialised successfully\n------------------------------------------------\n\n`)}();const d=await gsChrome.tabsQuery({active:!0,currentWindow:!0});d.length>0&&gsTabCheckManager.queueTabCheck(d[0]),gsUtils.log("gsSession","updating current session"),w(),g=!1},getSessionId:f,buildCurrentSession:h,updateCurrentSession:w,isInitialising:function(){return g},isUpdated:function(){return c},isFileUrlsAccessAllowed:function(){return d},getTabCheckTimeTakenInSeconds:function(){return n},getRecoveryTimeTakenInSeconds:function(){return i},getStartupType:function(){return o},setSynchedSettingsOnInit:function(s){r=s},getStartupLastVersion:function(){return a},recoverLostTabs:m,triggerDiscardOfAllTabs:async function(){await new Promise((s=>{chrome.tabs.query({active:!1,discarded:!1},(function(e){for(let s=0;s<e.length;++s)void 0===e[s]||gsUtils.isSpecialTab(e[s])||gsTabDiscardManager.queueTabForDiscard(e[s]);s()}))}))},restoreSessionWindow:U,prepareForUpdate:u,getUpdateType:function(){return l},updateSessionMetrics:async function(s){s=s||!1;const e=await gsChrome.tabsQuery();let t,n=0;for(let s of e)gsUtils.isSuspendedTab(s)&&(n+=1);if(s?gsUtils.log("gsSession","Resetting session metrics"):t=gsStorage.fetchSessionMetrics(),!t||!t[gsStorage.SM_TIMESTAMP])return i=n,o=e.length,t={[gsStorage.SM_TIMESTAMP]:Date.now(),[gsStorage.SM_SUSPENDED_TAB_COUNT]:i,[gsStorage.SM_TOTAL_TAB_COUNT]:o},gsStorage.setSessionMetrics(t),void gsUtils.log("gsSession","Created new session metrics",t);var i,o;t[gsStorage.SM_SUSPENDED_TAB_COUNT]<n&&(t[gsStorage.SM_SUSPENDED_TAB_COUNT]=n,t[gsStorage.SM_TOTAL_TAB_COUNT]=e.length,gsStorage.setSessionMetrics(t),gsUtils.log("gsSession","Updated session metrics",t))}}}();