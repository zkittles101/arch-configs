var gsTabDiscardManager=function(){"use strict";const i="_discardQueue";let s;function e(e,t,a){return gsUtils.log(e.id,i,"Queueing tab for discarding."),t=t||{},s.queueTabAsPromise(e,t,a)}async function t(s,e,t,a,r){let d=null;try{d=await gsChrome.tabsGet(s.id)}catch(i){}if(!d)return gsUtils.warning(s.id,i,"Failed to discard tab. Tab may have already been discarded or removed."),void t(!1);if(s=d,gsUtils.isSuspendedTab(s)&&"loading"===s.status)return gsUtils.log(s.id,i,"Tab is still loading"),void r();if(tgs.isCurrentActiveTab(s)){if(!gsStorage.getOption(gsStorage.DISCARD_IN_PLACE_OF_SUSPEND))return gsUtils.log(s.id,i,"Tab is active. Aborting discard."),void t(!1)}if(gsUtils.isDiscardedTab(s))return gsUtils.log(s.id,i,"Tab already discarded"),void t(!1);gsUtils.log(s.id,i,"Forcing discarding of tab."),chrome.tabs.discard(s.id,(()=>{chrome.runtime.lastError?(gsUtils.warning(s.id,i,chrome.runtime.lastError),t(!1)):t(!0)}))}function a(s,e,t,a,r,d){gsUtils.warning(s.id,i,`Failed to discard tab: ${t}`),a(!1)}return{initAsPromised:function(){return new Promise((e=>{s=GsTabQueue(i,{concurrentExecutors:5,jobTimeout:5e3,executorFn:t,exceptionFn:a}),gsUtils.log(i,"init successful"),e()}))},queueTabForDiscard:function(s,t,a){e(s,t,a).catch((e=>{gsUtils.log(s.id,i,e)}))},queueTabForDiscardAsPromise:e,unqueueTabForDiscard:function(e){s.unqueueTab(e)&&gsUtils.log(e.id,i,"Removed tab from discard queue")},handleDiscardedUnsuspendedTab:async function(s){if(gsUtils.shouldSuspendDiscardedTabs()&&gsTabSuspendManager.checkTabEligibilityForSuspension(s,3)){tgs.setTabStatePropForTabId(s.id,tgs.STATE_SUSPEND_REASON,3);const e=gsUtils.generateSuspendedUrl(s.url,s.title,0);return gsUtils.log(s.id,i,"Suspending discarded unsuspended tab"),void await gsTabSuspendManager.executeTabSuspension(s,e)}}}}();